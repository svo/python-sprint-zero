[tox]
minversion = 3.28.0
envlist = default
isolated_build = True
toxworkdir = /tmp/.tox
requires =
    tox>=3.28.0,<4
    tox-recreate

[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
    PYTHONPATH = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    flake8
    black . --check
    bandit -r src
    semgrep scan --config auto --error .
    radon cc . -a -s -nb
    xenon --max-absolute A --max-modules A --max-average A .
    mypy src
    pytest --junitxml=build/pytest.xml --random-order --cov python_sprint_zero --cov-fail-under=100 --cov-report term-missing --cov-report xml --cov-config=.coveragerc -W error {posargs}

[testenv:format]
description = Format code
changedir = {toxinidir}
commands =
    black .

[testenv:watch]
description = Watch for file changes and invoke pytest to run automated tests as need
changedir = {toxinidir}
usedevelop = True
setenv =
    TESTMON_DATAFILE = {envdir}/.testmon
commands =
    ptw --poll --runner "pytest --testmon --random-order" {posargs}

[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}

[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}

[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
